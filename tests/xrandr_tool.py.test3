import tkinter as tk
from tkinter import messagebox
import subprocess

# Global variables to track the initial and current states
initial_orientation = None
initial_resolution = None
initial_position = None
connected_displays = []  # To track currently connected displays

def run_xrandr_command(commands):
    try:
        result = subprocess.run(['xrandr'] + commands, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode().strip()
        print(f"Executed: {' '.join(commands)}")
        return output
    except subprocess.CalledProcessError as e:
        print(f"Failed to execute {' '.join(commands)}: {e}")
        return None

def get_main_display():
    try:
        result = subprocess.run(['xrandr'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode().strip()
        lines = output.splitlines()
        for line in lines:
            if " connected primary" in line:
                return line.split()[0]
            elif " connected" in line and "primary" not in line:
                return line.split()[0]  # Fallback if primary not found
        return None
    except subprocess.CalledProcessError as e:
        print(f"Failed to get main display: {e}")
        return None

def get_external_displays(main_display):
    try:
        result = subprocess.run(['xrandr'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode().strip()
        lines = output.splitlines()
        displays = []
        for line in lines:
            if " connected" in line:
                display_name = line.split()[0]
                if display_name != main_display:
                    displays.append(display_name)
        return displays
    except subprocess.CalledProcessError as e:
        print(f"Failed to get external displays: {e}")
        return []

def get_display_resolution(display):
    try:
        result = subprocess.run(['xrandr'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode().strip()
        lines = output.splitlines()
        for line in lines:
            if line.startswith(display):
                for res_line in lines:
                    if "*" in res_line:
                        resolution = res_line.split()[0]
                        return resolution
        return "Resolution not found."
    except subprocess.CalledProcessError as e:
        print(f"Failed to get display resolution: {e}")
        return None

def get_available_resolutions(display):
    try:
        result = subprocess.run(['xrandr'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode().strip()
        lines = output.splitlines()
        resolutions = []
        capture = False
        for line in lines:
            if line.startswith(display):
                capture = True
                continue
            if capture:
                if "connected" in line:
                    break  # Stop capturing when the next display is found
                res_parts = line.split()
                if res_parts and res_parts[0].replace('x', '').isdigit():  # Ensure it's a valid resolution
                    resolutions.append(res_parts[0])
        return resolutions
    except subprocess.CalledProcessError as e:
        print(f"Failed to get available resolutions for {display}: {e}")
        return []

def store_initial_values(orientation_var, position_var, resolution_var):
    global initial_orientation, initial_position, initial_resolution
    initial_orientation = orientation_var.get()
    initial_position = position_var.get()
    initial_resolution = resolution_var.get()

def has_changed(orientation_var, position_var, resolution_var):
    return (orientation_var.get() != initial_orientation or
            position_var.get() != initial_position or
            resolution_var.get() != initial_resolution)

def apply_settings(main_display, display_var, position_var, resolution_var, root, orientation_var=None):
    global initial_orientation

    # Automatically detect which display is being interacted with
    target_display = display_var.get() if display_var.get() else main_display

    if has_changed(orientation_var, position_var, resolution_var):
        # Run the --auto command first
        run_xrandr_command(['--output', target_display, '--auto'])

        if position_var.get() == "same-as":
            run_xrandr_command(['--output', target_display, '--same-as', main_display])
        elif target_display != main_display:
            # Ensure the scaling is correct regardless of position
            run_xrandr_command(['--output', target_display, '--auto', f'--{position_var.get()}', main_display])

        if resolution_var.get() != initial_resolution:
            run_xrandr_command(['--output', target_display, '--mode', resolution_var.get()])

        new_orientation = orientation_var.get()

        # Check if the orientation is the same as the original or if it is set to "normal"
        if new_orientation == initial_orientation or new_orientation == "normal":
            run_xrandr_command(['--output', main_display, '--rotate', new_orientation])
            initial_orientation = new_orientation  # Update the original orientation
            print(f"Orientation saved as: {initial_orientation}")
            return

        # Apply orientation change directly to the main display only
        change_orientation(main_display, new_orientation, root)

def change_orientation(display, new_orientation, root, prompt_window=None):
    global initial_orientation
    try:
        command = ['--output', display, '--rotate', new_orientation]
        result = run_xrandr_command(command)
        if result is not None:
            if new_orientation != "normal" and new_orientation != initial_orientation:
                start_revert_timer(display, root, new_orientation)
            else:
                initial_orientation = new_orientation  # Update the original orientation
                print(f"Orientation saved as: {initial_orientation}")
            if prompt_window:
                prompt_window.destroy()  # Close prompt window if orientation is "normal"
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while changing orientation: {str(e)}")

def capture_current_orientation(display):
    try:
        result = subprocess.run(['xrandr', '--verbose'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.decode().strip()
        lines = output.splitlines()
        for line in lines:
            if display in line and "connected" in line:
                if "normal" in line:
                    return "normal"
                elif "left" in line:
                    return "left"
                elif "right" in line:
                    return "right"
                elif "inverted" in line:
                    return "inverted"
        return "normal"
    except subprocess.CalledProcessError as e:
        print(f"Failed to capture current orientation for {display}: {e}")
        return "normal"

def start_revert_timer(display, root, new_orientation):
    countdown = 10
    timer_canceled = False

    def revert_orientation():
        if not timer_canceled:
            run_xrandr_command(['--output', display, '--rotate', initial_orientation])
            notify_user(f"Orientation reverted to {initial_orientation}.")

    def update_timer():
        nonlocal countdown
        if countdown > 0:
            try:
                countdown_label.config(text=f"Orientation changed to {new_orientation}... Reverting in {countdown} seconds.")
            except tk.TclError:
                # If the window is destroyed, just continue the countdown in the background
                pass
            countdown -= 1
            root.after(1000, update_timer)
        else:
            revert_orientation()
            if confirmation_window.winfo_exists():
                confirmation_window.destroy()

    def confirm_change():
        nonlocal countdown, timer_canceled
        countdown = 0  # Stop the countdown
        timer_canceled = True
        global initial_orientation
        initial_orientation = new_orientation  # Update the original orientation to the new one
        if confirmation_window.winfo_exists():
            confirmation_window.destroy()  # Close the confirmation window
        print(f"Orientation saved as: {initial_orientation}")
        notify_user(f"Orientation set to {new_orientation} permanently.")

    confirmation_window = tk.Toplevel(root)
    confirmation_window.title("Confirm Orientation Change")
    confirmation_window.geometry("300x100")

    countdown_label = tk.Label(confirmation_window, text=f"Orientation changed to {new_orientation}... Reverting in {countdown} seconds.")
    countdown_label.pack(pady=10)

    confirm_button = tk.Button(confirmation_window, text="Confirm", command=confirm_change)
    confirm_button.pack(pady=10)

    update_timer()

def notify_user(message):
    print(message)

def reset_to_main_display_layout(root, display_var, position_var, resolution_var, resolution_menu, position_menu, resolution_label, external_resolution_label):
    # Reset the layout to the main display configuration
    display_var.set("")
    position_var.set("right-of")
    resolution_var.set("")
    resolution_menu.pack_forget()
    position_menu.pack_forget()
    external_resolution_label.config(text="")
    resolution_label.config(text=f"Main Display Resolution: {get_display_resolution(get_main_display())}")
    position_menu.pack(pady=10)

def update_displays(main_display, display_var, resolution_var, resolution_label, external_resolution_label, position_menu, position_var, resolution_menu, root):
    global connected_displays
    new_displays = get_external_displays(main_display)

    # Detect disconnected displays and run xrandr --output {device} --off
    for old_display in connected_displays:
        if old_display not in new_displays:
            run_xrandr_command(['--output', old_display, '--off'])
            print(f"Display {old_display} disconnected and turned off.")
            # Revert to default layout if HDMI disconnected
            reset_to_main_display_layout(root, display_var, position_var, resolution_var, resolution_menu, position_menu, resolution_label, external_resolution_label)

    if new_displays != connected_displays:
        connected_displays = new_displays
        if connected_displays:
            display_var.set(connected_displays[0])
            external_resolution_label.config(text=f"External Display Resolution: {get_display_resolution(display_var.get())}")
            run_xrandr_command(['--output', connected_displays[0], '--auto'])
            available_resolutions = get_available_resolutions(display_var.get())
            if available_resolutions:
                resolution_var.set(available_resolutions[0])
                resolution_menu['menu'].delete(0, 'end')
                for resolution in available_resolutions:
                    resolution_menu['menu'].add_command(label=resolution, command=tk._setit(resolution_var, resolution))
            position_menu.pack(pady=10)
            resolution_menu.pack(pady=10)
            if len(connected_displays) == 1:
                display_info_label = tk.Label(root, text=f"Display: {connected_displays[0]}")
                display_info_label.pack(pady=10)
            else:
                display_menu = tk.OptionMenu(root, display_var, *connected_displays)
                display_menu.pack(pady=10)
                display_var.trace("w", lambda *args: external_resolution_label.config(text=f"External Display Resolution: {get_display_resolution(display_var.get())}"))
        else:
            reset_to_main_display_layout(root, display_var, position_var, resolution_var, resolution_menu, position_menu, resolution_label, external_resolution_label)

    root.after(2000, update_displays, main_display, display_var, resolution_var, resolution_label, external_resolution_label, position_menu, position_var, resolution_menu, root)

def show_xrandr_control():
    global initial_orientation, connected_displays
    root = tk.Tk()
    root.title("xrandr Control")
    root.geometry("450x400")  # Increased window size

    main_display = get_main_display()
    if not main_display:
        messagebox.showerror("Error", "Could not detect the main display.")
        root.destroy()
        return

    initial_orientation = capture_current_orientation(main_display)
    print(f"Initial Orientation: {initial_orientation}")

    connected_displays = get_external_displays(main_display)

    display_label = tk.Label(root, text=f"Main Display: {main_display}")
    display_label.pack(pady=10)

    resolution_label = tk.Label(root, text=f"Main Display Resolution: {get_display_resolution(main_display)}")
    resolution_label.pack(pady=10)

    display_var = tk.StringVar(root)
    
    external_resolution_label = tk.Label(root, text="")
    external_resolution_label.pack(pady=10)

    resolution_var = tk.StringVar(root)

    position_var = tk.StringVar(root)
    position_var.set("right-of")
    position_menu = tk.OptionMenu(root, position_var, "right-of", "left-of", "above", "below", "same-as")

    resolution_menu = tk.OptionMenu(root, resolution_var, "")  # Initialize empty resolution menu

    if connected_displays:
        display_var.set(connected_displays[0])
        external_resolution_label.config(text=f"External Display Resolution: {get_display_resolution(display_var.get())}")
        run_xrandr_command(['--output', connected_displays[0], '--auto'])
        available_resolutions = get_available_resolutions(display_var.get())
        if available_resolutions:
            resolution_var.set(available_resolutions[0])
            resolution_menu = tk.OptionMenu(root, resolution_var, *available_resolutions)
            resolution_menu.pack(pady=10)
        if len(connected_displays) == 1:
            display_info_label = tk.Label(root, text=f"Display: {connected_displays[0]}")
            display_info_label.pack(pady=10)
        else:
            display_menu = tk.OptionMenu(root, display_var, *connected_displays)
            display_menu.pack(pady=10)
            display_var.trace("w", lambda *args: external_resolution_label.config(text=f"External Display Resolution: {get_display_resolution(display_var.get())}"))
        position_menu.pack(pady=10)
        resolution_menu.pack(pady=10)
    else:
        external_resolution_label.config(text="No external displays found.")

    orientation_var = tk.StringVar(root)
    orientation_var.set(initial_orientation)
    orientation_menu = tk.OptionMenu(root, orientation_var, "normal", "left", "right", "inverted")
    orientation_menu.pack(pady=10)

    # Store initial dropdown values
    store_initial_values(orientation_var, position_var, resolution_var)

    apply_button = tk.Button(root, text="Apply Settings", command=lambda: apply_settings(main_display=get_main_display(), display_var=display_var, position_var=position_var, resolution_var=resolution_var, root=root, orientation_var=orientation_var))
    apply_button.pack(side=tk.BOTTOM, pady=20)

    root.after(2000, update_displays, main_display, display_var, resolution_var, resolution_label, external_resolution_label, position_menu, position_var, resolution_menu, root)

    root.bind('<Escape>', lambda event: root.destroy())
    root.bind('<q>', lambda event: root.destroy())

    root.mainloop()
